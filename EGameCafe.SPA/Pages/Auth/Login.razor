@page "/login"
@inject ILoginVm ViewModel

<style>
    .validation-message {
        text-align: left;
        padding-left: 25px;
    }

    .alert-danger {
        text-align: left;
        color: #ff172d;
        background-color: #141519;
        border: none;
        padding-left: 40px;
        margin-bottom: 0 !important;
    }

    .panel .login-input {
        margin-top: 10px;
        background-color: #22232a;
        -webkit-border-radius: 45px;
        -moz-border-radius: 45px;
        border-radius: 45px;
        font-size: 15px;
        height: 45px;
        border: none;
        padding-left: 15px;
        width: -webkit-calc(100% - 15px);
        width: -moz-calc(100% - 15px);
        width: calc(100% - 15px);
        margin-bottom: 10px;
    }

        .panel .login-input[placeholder] {
            color: #656d79;
            font-size: 15px;
            font-weight: 500;
        }

</style>

<div class="panel">
    <div class="state"><br><i class="fa fa-unlock-alt"></i><br>
        <h2>Welcome To</h2>
        <h2>Egame Cafe</h2>
    </div>

    <DisplayNotification Notification="ViewModel.Notification" />

    <EditForm Model="ViewModel" OnValidSubmit="HandleLogin">
        <FluentValidator></FluentValidator>

        <div class="form">
            <ValidationMessage For="@(() => ViewModel.Item.Username)" />
            <InputText @bind-Value="ViewModel.Item.Username" class="login-input" placeholder='Email or Username'
                type="text" />

            <ValidationMessage For="@(() => ViewModel.Item.Password)" />
            <InputText @bind-Value="ViewModel.Item.Password" class="login-input" placeholder='Password'
                type="password" />

            <button type="submit" class="login">Login</button>
        </div>

        <div class="fack">
            <div>
                <a href="forgotpassword"><i class="fa fa-question-circle"></i>Forgot password</a>
            </div>
            <div class="pt-2">
                <a href="register"><i class="fa fa-question-circle"></i>You don’t have an account? Sign up </a>
            </div>

        </div>

    </EditForm>

</div>

@code {
    protected override void OnInitialized()
    {
        ViewModel.PropertyChanged += async (sender, e) =>
        {
            await InvokeAsync(() =>
            {
    StateHasChanged();
            });
        };
    }

    async void OnPropertyChangedHandler(object sender, PropertyChangedEventArgs e)
    {
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    protected async Task HandleLogin()
    {
        await ViewModel.HandleLogin(ViewModel.Item);
    }

}

@page "/otp/{type}"
@inject IOTPVm ViewModel


<style>
    .validation-message {
        text-align: left;
        padding-left: 25px;
    }

    .alert-danger {
        text-align: left;
        color: #ff172d;
        background-color: #141519;
        border: none;
        padding-left: 40px;
        margin-bottom: 0 !important;
    }

    .panel .login-input {
        margin-top: 10px;
        background-color: #22232a;
        -webkit-border-radius: 45px;
        -moz-border-radius: 45px;
        border-radius: 45px;
        font-size: 15px;
        height: 45px;
        border: none;
        padding-left: 15px;
        width: 330px;
        margin-bottom: 10px;
    }

        .panel .login-input[placeholder] {
            color: #656d79;
            font-size: 15px;
            font-weight: 500;
        }
</style>

<div class="panel">
    <div class="state">
        <br /><br />
        <h2>Enter The Code</h2>
        <h2>We Sent To</h2>
        <h2>Your Messages</h2>
    </div>
    <br><br />

    <DisplayNotification Notification="ViewModel.Notification" />

    <EditForm Model="ViewModel" OnValidSubmit="HandleLogin" class="form">
        <FluentValidator></FluentValidator>

        <ValidationMessage For="@(() => ViewModel.OTPNumber)" />
        <InputNumber @bind-Value="ViewModel.OTPNumber" class="login-input" placeholder="The Verification Code" />

        <button type="submit" class="login">Verify</button>
    </EditForm>

</div>

@code {

    [Parameter]
    public string Type { get; set; }

    protected override void OnInitialized()
    {
        ViewModel.Type = Type;

        ViewModel.PropertyChanged += async (sender, e) =>
        {
            await InvokeAsync(() =>
            {
                StateHasChanged();
            });
        };
    }

    async void OnPropertyChangedHandler(object sender, PropertyChangedEventArgs e)
    {
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    protected async Task HandleLogin()
    {
        await ViewModel.HandleOTP(ViewModel.OTPNumber);
    }

}

@inject NavigationManager NavigationManager
@inject ICurrentUserService _currentUserService
@implements IAsyncDisposable

<section class="chat">
    <div class="header-chat">
        <i class="icon fa fa-user-o" aria-hidden="true"></i>
        <p class="name" @onclick="@(()=>OnChatClick(ChatViewType.groupInfo))">@CurrentGroup.GroupName</p>
        <i class="icon clickable fa fa-ellipsis-h right" aria-hidden="true"></i>
    </div>
    <div class="messages-chat">

        @foreach (var msg in messages)
        {

            if (msg.UserId == CurrentUserId)
            {
                <div class="message text-only">
                    <div class="response">
                        <p class="text"> @msg.MessageText </p>
                    </div>
                </div>
            }

            else if (msg.WithImage)
            {
                <div class="message">
                    <div class="photo" style="background-image: url(https://image.noelshack.com/fichiers/2017/38/2/1505775062-1505606859-portrait-1961529-960-720.jpg);">
                        <div class="online"></div>
                    </div>
                    <div class="text">
                        <p style="font-size:11px; margin-bottom:3px">@msg.Username</p>
                        <p class="mb-0" style="font-size:19px">
                            @msg.MessageText
                        </p>
                    </div>
                </div>
            }

            else if (CurrentUserId != msg.UserId)
            {
                <div class="message text-only">
                    <p class="text"> @msg.MessageText</p>
                </div>
                @*<p class="time"> 14h58</p>*@
            }


        }

    </div>
    <div class="footer-chat">
        <i class="icon fa fa-smile-o clickable" style="font-size:25pt;" aria-hidden="true"></i>
        <input @bind-value="messageInput" @bind-value:event="oninput" @onkeypress="@(async (e)=> { if (e.Code == "Enter") await Send(); })" type="text" class="write-message" placeholder="Type your message here" />
        <button @onclick="@(async ()=> await Send())" class="icon send fa fa-paper-plane-o clickable" aria-hidden="true"></button>
    </div>
</section>

@code{

    private GetAllGroupsDto currentGroup;

    [Parameter]
    public GetAllGroupsDto CurrentGroup
    {
        get => currentGroup;
        set
        {
            currentGroup = value;
            IsAdded = false;
            messages.Clear();
        }
    }

    private HubConnection hubConnection;
    private List<ChatMessageModel> messages = new List<ChatMessageModel>();
    private string userInput;
    private string messageInput { get; set; }


    private bool ChangeUserId;
    private string CurrentUserId;
    private string LastUserId;
    private string Username;

    private bool IsAdded;

    protected override async Task OnParametersSetAsync()
    {
        base.OnParametersSet();

        if (!IsAdded)
        {
            await AddToGroup();
            IsAdded = true;
        }
    }

    protected override void OnInitialized()
    {
        Random _rand = new Random();
        CurrentUserId = _rand.Next(100, 1000000).ToString();
    }

    protected override async Task OnInitializedAsync()
    {
        Username = await _currentUserService.GetUsername();

        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("https://localhost:44376/chathub"))
        .Build();

        hubConnection.On<string, string, string>("Send", (userId, message, username) =>
        {
            var encodedMsg = $"{message}";

            ChatMessageModel msg = new()
            {
                MessageText = encodedMsg,
                UserId = userId,
                Username = username
            };

            if (LastUserId != userId && userId != CurrentUserId)
            {
                msg.WithImage = true;
            }

            messages.Add(msg);

            LastUserId = userId;

            StateHasChanged();
        });


        //CurrentUserId = await _currentUserService.GetUserId();

        await hubConnection.StartAsync();

    }

    protected async Task Send()
    {
        await hubConnection.SendAsync("SendMessageToGroup", currentGroup.GroupId, CurrentUserId, messageInput, Username);
        messageInput = string.Empty;
    }

    Task AddToGroup() => hubConnection.SendAsync("AddToGroup", currentGroup.GroupId);

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }

    [Parameter]
    public EventCallback<ChatViewType> ClickedGroupInfo { get; set; }

    private Task OnChatClick(ChatViewType type)
    {
        return ClickedGroupInfo.InvokeAsync(type);
    }
}

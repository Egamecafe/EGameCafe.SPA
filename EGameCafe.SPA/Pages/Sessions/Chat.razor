@page "/chat/{action}"


@inject IChatVm ViewModel
@inject NavigationManager _navigationManager



<Discussions List="ViewModel.Item.List" ClickedGroup="@((e)=>OnChatClickChanged(e))" />


@if (Action == ChatViewType.groupChat.ToString() && ViewModel.CurrentGroup is not null)
{
    <GroupChat CurrentGroup="@ViewModel.CurrentGroup" ClickedGroupInfo="OnGroupInfoClick" />
}
else if (Action == ChatViewType.createChat.ToString())
{
    <CreateGroup />
}
else if (Action == ChatViewType.groupInfo.ToString())
{
    <GroupInfo GroupId="@ViewModel.CurrentGroup.GroupId" />
}
else
{
    <div class="chat"></div>
}



@code{
    [Parameter]
    public string Action { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await ViewModel.HandleGetGroups();
    }

    protected override void OnInitialized()
    {
        ViewModel.PropertyChanged += async (sender, e) =>
        {
            await InvokeAsync(() =>
            {
                StateHasChanged();
            });
        };
    }

    async void OnPropertyChangedHandler(object sender, PropertyChangedEventArgs e)
    {
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    protected void OnChatClickChanged(GetAllGroupsDto dto)
    {
        ViewModel.CurrentGroup = dto;
        _navigationManager.NavigateTo($"/chat/{ChatViewType.groupChat}");
    }

    protected void OnGroupInfoClick(ChatViewType type)
    {
        _navigationManager.NavigateTo($"/chat/{type}");
    }
}
